/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------> Importaciones 
//-------> Paquetes 

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;


//-------> Codigo para el parser, variables, metodos

parser code
{:  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    public String resultado = "";
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

:}


//-------> Codigo para las acciones gramaticales

action code
{:
//METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER
int exponente(int exp){
    int resultado= 1;
    for(int i=1; i<exp; i++){
        resultado = resultado *2;
    }
    return resultado;
}

:}  

/*----------------------------------------------------------------------------
--------------------- 2da. Area: Declaraciones
----------------------------------------------------------------------------*/

//-------> TERMINALES
terminal apar, cpar, coma;
terminal mas, menos, por, dividir;
terminal String id, numero,cadena, claves, registros;

//-------> NO TERMINALES
non terminal Double INICIO;
non terminal Double E;

//-------> PRECEDENCIA
precedence left mas, menos;
precedence left por, dividir;

start with INICIO;


/*-------------------------------------------------------------------
--------------------- 3ra. y ultima area: Reglas Sintacticas
-------------------------------------------------------------------*/
INICIO::=  E:a {: 
             String temp = String.valueOf(a);
             System.out.println("Operacion: "+temp); 
             resultado = temp;
             RESULT = a;
            :};

E::= E:a mas E:b{:
    RESULT= a+b;
:}
|E:a menos E:b{:
    RESULT= a-b;
:}
|E:a por E:b{:
    RESULT= a*b;
:}
|E:a dividir E:b{:
    RESULT= a/b;
:}
|numero:a {:
    RESULT=Double.parseDouble((String)a);
:}
|menos E:a{:
    RESULT = -a;
:}
|apar E:a cpar{:
    RESULT=a;
:};
