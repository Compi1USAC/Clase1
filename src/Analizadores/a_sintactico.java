
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class a_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public a_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public a_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public a_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\005\000\002\014\005\000\002\014\003" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\003\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\006\004\004\016\005\001\002\000\010\004" +
    "\016\014\025\016\005\001\002\000\016\002\ufff7\005\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\001\002\000\014\002" +
    "\uffff\007\014\010\015\011\012\012\013\001\002\000\004" +
    "\002\011\001\002\000\004\002\000\001\002\000\004\002" +
    "\001\001\002\000\006\004\016\016\005\001\002\000\006" +
    "\004\016\016\005\001\002\000\006\004\016\016\005\001" +
    "\002\000\006\004\016\016\005\001\002\000\006\004\016" +
    "\016\005\001\002\000\016\002\ufffa\005\ufffa\007\ufffa\010" +
    "\ufffa\011\012\012\013\001\002\000\014\005\021\007\014" +
    "\010\015\011\012\012\013\001\002\000\016\002\ufff6\005" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\001\002\000\016" +
    "\002\ufffb\005\ufffb\007\ufffb\010\ufffb\011\012\012\013\001" +
    "\002\000\016\002\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\001\002\000\016\002\ufff9\005\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\001\002\000\006\005\ufffc\006\ufffc" +
    "\001\002\000\006\005\027\006\030\001\002\000\004\002" +
    "\ufffe\001\002\000\004\014\031\001\002\000\006\005\ufffd" +
    "\006\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\010\002\006\003\007\021\005\001\001\000" +
    "\006\014\025\021\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\023\001\001\000\004\021\022\001\001" +
    "\000\004\021\021\001\001\000\004\021\016\001\001\000" +
    "\004\021\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$a_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$a_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$a_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    public String resultado = "";
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$a_sintactico$actions {


//METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER
int exponente(int exp){
    int resultado= 1;
    for(int i=1; i<exp; i++){
        resultado = resultado *2;
    }
    return resultado;
}


  private final a_sintactico parser;

  /** Constructor */
  CUP$a_sintactico$actions(a_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$a_sintactico$do_action_part00000000(
    int                        CUP$a_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$a_sintactico$parser,
    java.util.Stack            CUP$a_sintactico$stack,
    int                        CUP$a_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$a_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$a_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$a_sintactico$parser.done_parsing();
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              Object RESULT =null;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		 System.out.println("Operacion: "+(String)a); 
             resultado = (String)a;
            
              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= apar ESTRUCTURA cpar 
            {
              Object RESULT =null;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURA ::= ESTRUCTURA coma rnave 
            {
              Object RESULT =null;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",10, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURA ::= rnave 
            {
              Object RESULT =null;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",10, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= E mas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		

    Double val1 = Double.parseDouble((String)a);
    Double val2 = Double.parseDouble((String)b);
    Double res=val1+val2;
    RESULT= (res)+"";

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= E menos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		
    Double val1 = Double.parseDouble((String)a);
    Double val2 = Double.parseDouble((String)b);
    Double res=val1-val2;
    RESULT= (res)+"";

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= E por E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		
    Double val1 = Double.parseDouble((String)a);
    Double val2 = Double.parseDouble((String)b);
    Double res=val1*val2;
    RESULT= (res)+"";

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= E dividir E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		
    Double val1 = Double.parseDouble((String)a);
    Double val2 = Double.parseDouble((String)b);
    Double res=val1/val2;
    RESULT= (res)+"";

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.peek()).value;
		

    RESULT=a;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= apar E cpar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-1)).value;
		
    RESULT=a;

              CUP$a_sintactico$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.elementAt(CUP$a_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$a_sintactico$stack.peek()), RESULT);
            }
          return CUP$a_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$a_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$a_sintactico$do_action(
    int                        CUP$a_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$a_sintactico$parser,
    java.util.Stack            CUP$a_sintactico$stack,
    int                        CUP$a_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$a_sintactico$do_action_part00000000(
                               CUP$a_sintactico$act_num,
                               CUP$a_sintactico$parser,
                               CUP$a_sintactico$stack,
                               CUP$a_sintactico$top);
    }
}

}
